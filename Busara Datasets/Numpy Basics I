{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Numpy Basics I","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"IiS9OPDU4CZ9","colab_type":"text"},"cell_type":"markdown","source":["### Numpy Library\n","\n","NumPy (Numerical Python) is a linear algebra library in Python.  It provides the tools to process the huge data sets which are essential to training any predictive model. \n","\n","NumPy's operations are divided into three main categories: \n","\n","\n","1.   Mathematical and Logical Operations\n","2.   Fourier Transform and Shape Manipulation\n","3.   Linear Algebra and Random Number Generation\n","\n","Tools for machine learning and neural networks like Scikit-learn, TensorFlow, and Pandas rely heavily on it, so if you’re headed into anything AI-related, it’s time to start getting your hands dirty (and your code clean) with NumPy."]},{"metadata":{"id":"qWfr0NVT5Xrw","colab_type":"text"},"cell_type":"markdown","source":["### 1. Import Numpy Library"]},{"metadata":{"id":"XdmfbCZ-5hyq","colab_type":"code","colab":{}},"cell_type":"code","source":["# Import the NumPy library as np\n","import numpy as np  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"8dYNCLxo05Pi","colab_type":"text"},"cell_type":"markdown","source":["*The import numpy line in this tutorial is repeated in every step so as to ensure that the learner is familiar with it use it whenever its needed*"]},{"metadata":{"id":"WzwamA7Y4tDA","colab_type":"text"},"cell_type":"markdown","source":["### 2.  Creating a NumPy Array"]},{"metadata":{"id":"LQJsenEG1e15","colab_type":"text"},"cell_type":"markdown","source":["There are several ways to create a NumPy array;\n","\n","\n","1.   The array method\n","2.   The arange Method\n","3.   The zeros Method\n","4.   The ones Method\n","5.   The linspace Method\n","6.   The eye Method\n","7.   The random Method\n","\n","\n"]},{"metadata":{"id":"eiVkExaL4-7g","colab_type":"text"},"cell_type":"markdown","source":["#### a) One-dimensional NumPy array"]},{"metadata":{"id":"1rVSCLjD3_NZ","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np  \n","x = [2, 3, 4, 5, 6]  \n","nums = np.array(x)  \n","print (nums) "],"execution_count":0,"outputs":[]},{"metadata":{"id":"U9EwbUSHAfqF","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge\n","# Create a one dimensional numpy array and display the result:\n","# Use this list first_list = [1, 2, 3, 4, 5]\n","# Expected Output: \n","# [1 2 3 4 5]\n","\n","# Your code goes below here:"],"execution_count":0,"outputs":[]},{"metadata":{"id":"zWKtMn_y6Bvb","colab_type":"text"},"cell_type":"markdown","source":["#### b) Two - Dimensional Numpy Array\n"]},{"metadata":{"id":"dPJ_MUvx6JaF","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np  \n","x = [[2,4,6], [8,10,12], [14,16,18]]\n","nums = np.array(x)  \n","print (nums) "],"execution_count":0,"outputs":[]},{"metadata":{"id":"m1IBfdXJBQcM","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge \n","# Create a 2 dimensional array and display the result:\n","# Use this list second_list = [[1,2,3], [5,4,1], [3,6,7]]\n","# Expected Output: \n","# [[1 2 3]\n","# [5 4 1]\n","# [3 6 7]]\n","\n","# Your code goes below here:\n"," "],"execution_count":0,"outputs":[]},{"metadata":{"id":"xbNWg7596mcE","colab_type":"text"},"cell_type":"markdown","source":["#### c) The Arange Method"]},{"metadata":{"id":"X7pDzpTu7EGC","colab_type":"text"},"cell_type":"markdown","source":["The arange method returns an array that starts with the starting index and ends at one index less than the end index. This method takes the start index of the array, the end index, and the step size (which is optional)"]},{"metadata":{"id":"lElbx1z46n4n","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np  \n","nums = np.arange(2, 7)    \n","print (nums) "],"execution_count":0,"outputs":[]},{"metadata":{"id":"e6knnRF-7Zvt","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np  \n","nums = np.arange(2, 7, 2)    \n","print (nums) "],"execution_count":0,"outputs":[]},{"metadata":{"id":"OZ9ZYAeA7ojk","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge \n","# Use the arange() method to create an array that contains 10 digits of values from index 0 to 10.\n","# Expected Output:\n","# [0 1 2 3 4 5 6 7 8 9]\n","\n","# Your code goes below here:\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"AcHDmYzoCUDN","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge \n","# Use the arange() method to create an array that generates all even numbers from 0 to 10\n","# Expected Output:\n","# [ 0  2  4  6  8 10]\n","\n","# Your code goes below here:"],"execution_count":0,"outputs":[]},{"metadata":{"id":"TIsPhr90Arux","colab_type":"text"},"cell_type":"markdown","source":["#### d) The Zeros Method"]},{"metadata":{"id":"ZNbkPx30AwjQ","colab_type":"text"},"cell_type":"markdown","source":["The zeros method to create an array of all zeros as shown in the first example. Similarly, to create a two-dimensional array, you can pass both the number of rows and columns to the zeros method."]},{"metadata":{"id":"21egw9r9AzVP","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np     \n","zeros = np.zeros(5) \n","print (zeros)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"-R414_KTBAjc","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np     \n","zeros = np.zeros((5, 4))  \n","print (zeros)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"UOC41GItBOdj","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge \n","# Using numpy, generate a one-dimensional array of seven zeros\n","# Expected output:\n","# [0. 0. 0. 0. 0. 0. 0.]\n","\n","# Your code goes below here:"],"execution_count":0,"outputs":[]},{"metadata":{"id":"iq1nkYunDdUg","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge \n","# Using numpy, generate a two-dimensional array of zeros having 3 rows and 5 columns\n","# Expected output:\n","# [[0. 0. 0. 0. 0.]\n","# [0. 0. 0. 0. 0.]\n","# [0. 0. 0. 0. 0.]]\n","\n","# Your code goes below here:"],"execution_count":0,"outputs":[]},{"metadata":{"id":"JLafN2PmBW-5","colab_type":"text"},"cell_type":"markdown","source":["#### e) The Ones Method"]},{"metadata":{"id":"ZEXZVVD2BarC","colab_type":"code","colab":{}},"cell_type":"code","source":["# Creating a one dimensional array\n","import numpy as np   \n","ones = np.ones(5)  \n","print (ones)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"xJ_eJo-ZBoN8","colab_type":"code","colab":{}},"cell_type":"code","source":["# Creating two dimensional array\n","import numpy as np   \n","ones = np.ones((5, 4))    \n","print (ones)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"CPmQFiWQB0y-","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge \n","# Using numpy, generate a one-dimensional array of five ones.\n","# Expected Output: [1. 1. 1. 1. 1.]\n","\n","# Your code goes below here:\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"9212oCsgH-pw","colab_type":"text"},"cell_type":"markdown","source":["#### The linspace Method"]},{"metadata":{"id":"ZNJ9HAWgIA3q","colab_type":"code","colab":{}},"cell_type":"code","source":["# if the first index is 1, the last index is 10, create 10 equally spaced elements within this range using the linspace method\n","import numpy as np   \n","lin = np.linspace(1, 10, 10) \n","print (lin)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"23BSazMNIsrD","colab_type":"code","colab":{}},"cell_type":"code","source":["# Create an array with 20 linearly-spaced elements between 1 and 10\n","import numpy as np   \n","lin = np.linspace(1, 10, 20)  \n","print (lin)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ZjzkaNvwJDR7","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge \n","# Using numpy, generate array with 15 evenly spaced points from 1 to 3\n","# Expected Output: \n","# [1.         1.14285714 1.28571429 1.42857143 1.57142857 1.71428571\n","# 1.85714286 2.         2.14285714 2.28571429 2.42857143 2.57142857\n","#  2.71428571 2.85714286 3.        ]\n","\n","# Your code goes below here:"],"execution_count":0,"outputs":[]},{"metadata":{"id":"NqcFVlK1ERb3","colab_type":"text"},"cell_type":"markdown","source":["#### f) The Eye Method"]},{"metadata":{"id":"pE-Hdu8mEkaa","colab_type":"text"},"cell_type":"markdown","source":["The eye method can be used to create an identity matrix, which can be very useful to perform a variety of operations in linear algebra. An identity matrix is a matrix with zeros across rows and columns except the diagonal. The diagonal values are all ones."]},{"metadata":{"id":"ufmwt5mxEUXi","colab_type":"code","colab":{}},"cell_type":"code","source":["# Create a 4x4 identity matrix using the eye method:\n","import numpy as np   \n","idn = np.eye(4)   \n","print (idn)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"C6J5zXUOJ-7h","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge \n","# Create a 6x6 identity matrix using the eye method:\n","# Expected Output: \n","# [[1. 0. 0. 0. 0. 0.]\n","# [0. 1. 0. 0. 0. 0.]\n","# [0. 0. 1. 0. 0. 0.]\n","# [0. 0. 0. 1. 0. 0.]\n","# [0. 0. 0. 0. 1. 0.]\n","# [0. 0. 0. 0. 0. 1.]]\n","\n","# Your code goes below here:\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PeyAWCzEEsDq","colab_type":"text"},"cell_type":"markdown","source":["#### g) The Random Method\n"]},{"metadata":{"id":"g4GstAxbEvqK","colab_type":"code","colab":{}},"cell_type":"code","source":["# Creating a matrix of 2 rows and 3 columns. The matrix contains uniform distribution of numbers between 0 and 1 using rand\n","import numpy as np   \n","random = np.random.rand(2, 3) \n","print (random)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"GVeqRUOhFKVe","colab_type":"code","colab":{}},"cell_type":"code","source":["# Creating a matrix of random numbers with the Gaussian distribution (or \"normal\" distribution) using randn\n","import numpy as np   \n","random = np.random.randn(2, 3)  \n","print (random)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"-yGcdmv6FzMB","colab_type":"code","colab":{}},"cell_type":"code","source":["# Creating an array of 5 random integers between 50 and 100 using randint\n","import numpy as np   \n","random = np.random.randint(50, 100, 5)  \n","print (random)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"qwf7H5WeKwrm","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 1\n","# Create a one-dimensional array of 4 objects that are uniformly distributed from 0 to 1\n","# Expected Output (The elements will vary): \n","# [0.14763932 0.37422646 0.13384143 0.84753194]\n","\n","# Your code goes below here:"],"execution_count":0,"outputs":[]},{"metadata":{"id":"vNlhzdrvLOfb","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 2\n","# Create a two-dimensional array of 5rows and 4columns\n","# Expected Output (The elements will vary): \n","# [[0.57236031 0.3055651  0.65206053 0.68764418]\n","# [0.23996263 0.74961428 0.80504189 0.64968534]\n","# [0.12327888 0.11424665 0.54627544 0.96669566]\n","# [0.03991757 0.39683451 0.36993288 0.62278159]\n","# [0.36528092 0.60769206 0.67563603 0.28215996]]\n","\n","# Your code goes below here: "],"execution_count":0,"outputs":[]},{"metadata":{"id":"sYdiTKY-MaLI","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 3\n","# Generate a random integer exclusive of 20 \n","# Expected Output (Self Explanatory): \n","# Your code goes below here: "],"execution_count":0,"outputs":[]},{"metadata":{"id":"J2iZXgxKM7lU","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 4\n","# Generate a random integer including 2 but excluding 20 \n","# Expected Output (Self Explanatory): \n","# Your code goes below here: "],"execution_count":0,"outputs":[]},{"metadata":{"id":"Ib56zwbTNGTa","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 5\n","# Generate a random integer including 2 but excluding 20 \n","# Expected output (Elements will vary):\n","# [18 15 14  8  3 10 19]\n","\n","# Your code goes below here: "],"execution_count":0,"outputs":[]},{"metadata":{"id":"Q-dpcLBxJUb8","colab_type":"text"},"cell_type":"markdown","source":["### 3. Reshaping NumPy Array\n"]},{"metadata":{"id":"5lJRc6PzJYJR","colab_type":"text"},"cell_type":"markdown","source":["The convertion of a one-dimensional array into a two-dimensional array can happen using  the reshape method."]},{"metadata":{"id":"z3EEKkvvKAp7","colab_type":"code","colab":{}},"cell_type":"code","source":["# create an array of 16 elements using the arange function\n","import numpy as np   \n","nums = np.arange(1, 17)  \n","print (nums)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"GNIZGwAtJx_o","colab_type":"code","colab":{}},"cell_type":"code","source":["# Converting the nums array into a two-dimensional array of 4 rows and 4 columns\n","import numpy as np   \n","nums2 = nums.reshape(4, 4)  \n","print (nums2)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"IDMI-o0tNwtf","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 1\n","# Generate a 1-d array of random 25 integers, Then convert it to a 2-d array \n","# using the reshape() function\n","# Expected Output: \n","# [[0.48511396 0.17510887 0.727145   0.25800427 0.48919497]\n","# [0.58586053 0.72607626 0.88053511 0.91902241 0.89622183]\n","# [0.11440832 0.15877897 0.66050294 0.6613207  0.5016461 ]\n","# [0.43434374 0.0925687  0.41001584 0.52693281 0.74736984]\n","# [0.87111993 0.99926447 0.56290317 0.65064504 0.76800838]]\n","\n","# Your code goes below here...\n","\n","\n","# Comments:\n","# Note that the reshape() can only converted to equal number or rows and columns \n","# and must together be equal to equal to the number of elements."],"execution_count":0,"outputs":[]},{"metadata":{"id":"jsVo1oFeKQl9","colab_type":"text"},"cell_type":"markdown","source":["### 4. Finding Max/Min Values\n"]},{"metadata":{"id":"Qxoyx4XqKhs_","colab_type":"text"},"cell_type":"markdown","source":["The min/max functions can easily find the value of the smallest and largest number in an array."]},{"metadata":{"id":"irEOadgaKkrx","colab_type":"code","colab":{}},"cell_type":"code","source":["# Creating an array of 5 random integers\n","import numpy as np   \n","random = np.random.randint(1, 100, 5)  \n","print(random)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"08yFST7yK12u","colab_type":"code","colab":{}},"cell_type":"code","source":["# Find minimum value \n","xmin = random.min()  \n","print(xmin)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"a19kVfabK8dU","colab_type":"code","colab":{}},"cell_type":"code","source":["# Find maximum value \n","xmax = random.max()  \n","print(xmax)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"quwcztCWLNeB","colab_type":"code","colab":{}},"cell_type":"code","source":["# Find the index of the maximum value using argmax()\n","xargmin = random.argmin()\n","print(xargmin)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"SMrmGomuLXW9","colab_type":"code","colab":{}},"cell_type":"code","source":["# Find the index of the minimum value using argmin()\n","xargmax = random.argmax()\n","print(xargmax)   "],"execution_count":0,"outputs":[]},{"metadata":{"id":"tjdcE_YuOvPR","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 1\n","# Get the highest value in the array:\n","# Expected Output (Self Explanatory):  \n","\n","arr_2 = np.random.randint(0, 20, 10) \n","print (arr_2)\n","\n","# Your code goes below here...\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"M9lqcU20P-6K","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 2\n","# Get the lowest value in the array:\n","# Expected Output (Self Explanatory):  \n","\n","arr_2 = np.random.randint(0, 20, 10) \n","print (arr_2)\n","\n","# Your code goes below here...\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"1Htsf6ETMSy8","colab_type":"text"},"cell_type":"markdown","source":["### 5. Array Indexing\n"]},{"metadata":{"id":"okcH_FbqMe91","colab_type":"text"},"cell_type":"markdown","source":["#### a) Indexing with 1-D Arrays"]},{"metadata":{"id":"5487eiJ7MVYI","colab_type":"code","colab":{}},"cell_type":"code","source":["# Creating a simple array of 15 numbers\n","nums = np.arange(1, 16)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"QItpykLnNjwy","colab_type":"code","colab":{}},"cell_type":"code","source":["# Find the element at the second index\n","print(nums[2])  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"qE3_CMHUNm_c","colab_type":"code","colab":{}},"cell_type":"code","source":["# Get the elements from the first to seventh index\n","print(nums[1:8])  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"v04p9LiyNwOW","colab_type":"code","colab":{}},"cell_type":"code","source":["# Slice an array and assign the elements of the sliced array to a new array\n","nums2 = nums[0:8]  \n","print(nums2)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"k-BMi-2BRJKi","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 1\n","# Get the the index of the highest value in the array:\n","# Expected Output (Self Explanatory):  \n","\n","arr_2 = np.random.randint(0, 20, 10) \n","print (arr_2)\n","\n","# Your code goes below here..."],"execution_count":0,"outputs":[]},{"metadata":{"id":"LAP6zcD0RP-2","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 2\n","# Get the the index of the lowest value in the array:\n","# Expected Output (Self Explanatory):  \n","\n","arr_2 = np.random.randint(0, 20, 10) \n","print (arr_2)\n","\n","# Your code goes below here..."],"execution_count":0,"outputs":[]},{"metadata":{"id":"1PaYr8k-Ryiv","colab_type":"code","colab":{}},"cell_type":"code","source":["# If you are trying to figure out the shape of that array, and \n","# you want to know if it’s a one-dimensional or two-dimensional array, \n","# simply use the shape function.\n","\n","arr2.shape"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ur7KbrEvXVl2","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 3\n","# Get and display the value of element at index 8 \n","# Expected Output:\n","# 8\n","\n","my_array = np.arange(0,11) \n","\n","# Your code goes below here... "],"execution_count":0,"outputs":[]},{"metadata":{"id":"SworGew7XWPi","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 3\n","# Get and display everything from index 2 to 6(exclusive) \n","# Expected Output:\n","# [2, 3, 4, 5]\n","\n","my_array = np.arange(0,11) \n","\n","# Your code goes below here...   "],"execution_count":0,"outputs":[]},{"metadata":{"id":"FFd_BrfAXbVT","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 4\n","# Get and display everything from index 0 to 6(exclusive)\n","# Expected Output:\n","# [0, 1, 2, 3, 4, 5]\n","\n","my_array = np.arange(0,11) \n","\n","# Your code goes below here...  \n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"syFe1Z_bXe8K","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 5\n","# Get and display everything from index 5 to the end of the array.\n","# Expected Output:\n","# [ 5,  6,  7,  8,  9, 10]\n","\n","my_array = np.arange(0,11) \n","\n","# Your code goes below here... "],"execution_count":0,"outputs":[]},{"metadata":{"id":"MfdvMzLJN1PH","colab_type":"text"},"cell_type":"markdown","source":["#### b) Indexing with 2-D Arrays"]},{"metadata":{"id":"oC1elwNPN55J","colab_type":"code","colab":{}},"cell_type":"code","source":["# Create 3x3 two-dimensional NumPy array\n","nums2d = np.array(([1,2,3],[4,5,6],[7,8,9]))  \n","print(nums2d)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"hGpN6CciN9-I","colab_type":"code","colab":{}},"cell_type":"code","source":["# Retrieve an element from nums2d array, located in the first row and first column\n","print(nums2d[0, 0])  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"0KnzLxr7OVvo","colab_type":"code","colab":{}},"cell_type":"code","source":["# Retrieve the element at the third row and third column\n","print(nums2d[2, 2])  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"OUPmYpLMOWYx","colab_type":"code","colab":{}},"cell_type":"code","source":["# returns the first row from the nums2d array\n","print(nums2d[0])  \n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"_fkQ4HCsOcqn","colab_type":"code","colab":{}},"cell_type":"code","source":["# retrieve the first column only\n","print(nums2d[:,0])  \n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"cNL_-0acOjng","colab_type":"code","colab":{}},"cell_type":"code","source":["# retrieve the elements from the first two rows and first two columns\n","print(nums2d[:2,:2])  \n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"FXJq8dMNXqG5","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 1\n","# Get the value ‘60’ from the 2-d array below:\n","# Expected Output:\n","# 60\n","\n","two_d_arr = np.array([[10,20,30], [40,50,60], [70,80,90]])\n","\n","# Your code goes below here... \n","\n","\n","# Hint: The value 60 appears is in row index 1, and column index 2"],"execution_count":0,"outputs":[]},{"metadata":{"id":"FmOB2js-YRKp","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 2 \n","# Grab the value ‘20’ from the array below:\n","# Expected Output:\n","# 20\n","\n","two_d_arr = np.array([[10,20,30], [40,50,60], [70,80,90]])\n","\n","# Your code goes below here...  \n"," "],"execution_count":0,"outputs":[]},{"metadata":{"id":"mfUt4RAFYejJ","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 3\n","# Return the value [10, 20] from the array below:\n","# Expected Output:\n","# [[10 20]]\n","\n","two_d_arr = np.array([[10,20,30], [40,50,60], [70,80,90]])\n","\n","# Your code goes below here... \n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"gcj4JNKCY_FP","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 4\n","# Return the value:\n","# [[20 30]\n","# [50 60]] \n","# from the array below:\n","#\n","# Expected Output:\n","# [[20 30]\n","# [50 60]]\n","\n","two_d_arr = np.array([[10,20,30], [40,50,60], [70,80,90]])\n","\n","# Your code goes below here... "],"execution_count":0,"outputs":[]},{"metadata":{"id":"fikpDYprZgSj","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 5\n","# Get row 0 of the array \n","# Expected Output:\n","# [10, 20, 30]\n","\n","two_d_arr = np.array([[10,20,30], [40,50,60], [70,80,90]])\n","\n","# print (two_d_arr)\n","\n","# Your code goes below here... \n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"uOk2uS80aH2l","colab_type":"code","colab":{}},"cell_type":"code","source":["# Challenge 6\n","# Get everything before row 2\n","# Expected Output:\n","# [[10 20 30]\n","# [40 50 60]]\n","\n","two_d_arr = np.array([[10,20,30], [40,50,60], [70,80,90]])\n","\n","# print (two_d_arr)\n","\n","# Your code goes below here... \n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"cyCmJpM7OrvQ","colab_type":"text"},"cell_type":"markdown","source":["### 6. Arithmetic Operations with NumPy Arrays"]},{"metadata":{"id":"5txgYGF6uzrs","colab_type":"text"},"cell_type":"markdown","source":["#### Addition, Substraction, Multiplication, Division"]},{"metadata":{"id":"e4xuQC-pugqK","colab_type":"code","colab":{}},"cell_type":"code","source":["# Add each element to itself\n","arr = np.arange(1,11)\n","\n","print (arr + arr)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"cWYSYoFQbjUn","colab_type":"code","colab":{}},"cell_type":"code","source":["# Substract each element to itself\n","arr = np.arange(1,11)\n","\n","print (arr - arr)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"6NS1lZexbuax","colab_type":"code","colab":{}},"cell_type":"code","source":["# Multiply each element to itself\n","arr = np.arange(1,11)\n","\n","print (arr * arr)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"E8E4CRGhb0oC","colab_type":"code","colab":{}},"cell_type":"code","source":["# Divide each element to itself\n","arr = np.arange(1,11)\n","\n","print (arr / arr)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"DVYY659pupyi","colab_type":"code","colab":{}},"cell_type":"code","source":["# Add 50 to every element in that array\n","arr = np.arange(1,11)\n","\n","print (arr + 50)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"w5HlQHwXu5Ze","colab_type":"text"},"cell_type":"markdown","source":["#### Square roots, exponentials, trigonometric, etc "]},{"metadata":{"id":"ByDEuugSuueC","colab_type":"code","colab":{}},"cell_type":"code","source":["# Returns the square root of each element\n","arr = np.arange(1,11)\n","\n","print(np.sqrt(arr)) "],"execution_count":0,"outputs":[]},{"metadata":{"id":"3lG4XAKVvkb7","colab_type":"code","colab":{}},"cell_type":"code","source":["# Returns the exponentials of each element \n","\n","arr = np.arange(1,11)\n","\n","print(np.exp(arr))   "],"execution_count":0,"outputs":[]},{"metadata":{"id":"YO4xnQESmbnT","colab_type":"code","colab":{}},"cell_type":"code","source":["# Returns the sin of each element\n","\n","arr = np.arange(1,11)\n","\n","print(np.sin(arr))   "],"execution_count":0,"outputs":[]},{"metadata":{"id":"Gt-mmJHMmj-f","colab_type":"code","colab":{}},"cell_type":"code","source":["# Returns the cos of each element\n","\n","arr = np.arange(1,11)\n","\n","print(np.cos(arr))   "],"execution_count":0,"outputs":[]},{"metadata":{"id":"ZBk9lGfmmoC9","colab_type":"code","colab":{}},"cell_type":"code","source":["# Returns the logarithm of each element\n","\n","arr = np.arange(1,11)\n","\n","print(np.log(arr))   "],"execution_count":0,"outputs":[]},{"metadata":{"id":"btG-hjdTmvJd","colab_type":"code","colab":{}},"cell_type":"code","source":["# Returns the standard deviation of the array\n","\n","arr = np.arange(1,11)\n","\n","print(np.std(arr) )   "],"execution_count":0,"outputs":[]},{"metadata":{"id":"MB_v8bv2wDik","colab_type":"code","colab":{}},"cell_type":"code","source":["# Return an array with the sine of all the elements in the input array\n","nums3 = np.sin(nums)  \n","print(nums3)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"IsbmFKF7wQfT","colab_type":"text"},"cell_type":"markdown","source":["### 7. Linear Algebra Operations with NumPy Arrays\n"]},{"metadata":{"id":"aEKhCyKBwpJB","colab_type":"text"},"cell_type":"markdown","source":["#### Find the Vector Dot Product"]},{"metadata":{"id":"XNjMl7cwwTIS","colab_type":"code","colab":{}},"cell_type":"code","source":["# Creating two vectors\n","x = np.array([2,4])  \n","y = np.array([1,3]) "],"execution_count":0,"outputs":[]},{"metadata":{"id":"wiiJt-7Uwv09","colab_type":"code","colab":{}},"cell_type":"code","source":["# Finding the dot product via the dot method\n","print(x.dot(y))  \n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"mRmfROXbxCkO","colab_type":"text"},"cell_type":"markdown","source":["#### Matrix Multiplication\n"]},{"metadata":{"id":"9VrsVMQvxECI","colab_type":"code","colab":{}},"cell_type":"code","source":["# Creating a 3x2 matrix named X and a 2x3 matrix named Y\n","X = np.array(([1,2,3], [4,5,6]))\n","Y = np.array(([1,2], [4,5], [7,8]))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"xxccFUTlxh-j","colab_type":"code","colab":{}},"cell_type":"code","source":["# multiplying the X matrix with itself using the multiply function\n","Z = np.multiply(X, X)  \n","\n","# print the Z matrix\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"9YMMiZH7xnpb","colab_type":"code","colab":{}},"cell_type":"code","source":["# multiply the matrices X and Y element-wise and note what happens\n","Z = np.multiply(X, Y)  \n","\n","# print the Z matrix and find out why you got that answer"],"execution_count":0,"outputs":[]},{"metadata":{"id":"-iYwF1o1yBB8","colab_type":"text"},"cell_type":"markdown","source":["#### Finding the Inverse of a Matrix"]},{"metadata":{"id":"4nTHuwl5x-8T","colab_type":"code","colab":{}},"cell_type":"code","source":["# Finding the inverse of a 2x2 matrix\n","Y = np.array(([1,2], [3,4]))  \n","Z = np.linalg.inv(Y)  \n","print(Z)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"YmANMItCyk6q","colab_type":"text"},"cell_type":"markdown","source":["Verifying if the inverse has been calculated correctly, we take the dot product of a matrix with its inverse, which should yield an identity matrix;"]},{"metadata":{"id":"ONAS_6y-yc12","colab_type":"code","colab":{}},"cell_type":"code","source":["W = Y.dot(Z)  \n","print(W)  \n","\n","# ouput should have ones in the diagonal and zeros (or very close to zero) elsewhere."],"execution_count":0,"outputs":[]},{"metadata":{"id":"T5JN8boszKH2","colab_type":"text"},"cell_type":"markdown","source":["#### Finding the Determinant of a Matrix\n"]},{"metadata":{"id":"ZCH1fwPFzMrh","colab_type":"code","colab":{}},"cell_type":"code","source":["# creating a 3x3 matrix\n","X = np.array(([1,2,3], [4,5,6], [7,8,9]))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"e6vnAnMvzX0m","colab_type":"code","colab":{}},"cell_type":"code","source":["# Calculating the determinant of a matrix using the det method\n","Z = np.linalg.det(X)\n","print(Z)  "],"execution_count":0,"outputs":[]}]}